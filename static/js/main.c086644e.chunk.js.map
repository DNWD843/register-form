{"version":3,"sources":["configs/configForComponents.js","components/Form/Form.js","hooks/useFormWithValidation.js","components/App/App.js","index.js"],"names":["forAppForm","value","text","Form","handleSubmit","FORM_TITLE","config","REDIRECT_TITLE","REDIRECT_BUTTON_TEXT","NAME_INPUT_LABEL","NAME_INPUT_PLACEHOLDER","EMAIL_INPUT_LABEL","EMAIL_INPUT_PLACEHOLDER","TEL_INPUT_LABEL","TEL_INPUT_PLACEHOLDER","LANGUAGE_INPUT_LABEL","LANGUAGE_INPUT_PLACEHOLDER","OPTIONS_LIST","ACCEPT_TITLE_BEGIN","ACCEPT_TITLE_END","ACCEPT_LINK_TEXT","SUBMIT_BUTTON_TEXT","useState","values","setValues","errors","setErrors","isFormValid","setIsFormValid","isInputValid","setIsInputValid","handleInputChange","useCallback","evt","target","name","checkValidity","validationMessage","closest","resetForm","useFormWithValidation","email","phone","isMouseEntered","setIsMouseEntered","selectedValue","setSelectedValue","isSelectMenuOpen","setIsSelectMenuOpen","isSelectMenuHidden","setIsSelectMenuHidden","isCheckboxChecked","setIsCheckboxChecked","selectInputClassName","classNames","nameErrorClassName","emailErrorClassName","phoneErrorClassName","submitButtonClassName","closeSelectMenu","setTimeout","openSelectMenu","handleMouseEnter","id","handleMouseLeave","handleOptionClick","handleClickAccept","clearFormInputs","handleSubmitForm","preventDefault","language","accepted","useEffect","onSubmit","className","type","onChange","placeholder","pattern","required","onClick","onFocus","onBlur","readOnly","map","option","onMouseMove","onMouseOut","disabled","App","handleSubmitRegisterForm","data","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c086644e.chunk.js","sourcesContent":["export const forAppForm = {\n  FORM_TITLE: 'Регистрация',\n  REDIRECT_TITLE: 'Уже есть аккаунт?',\n  REDIRECT_BUTTON_TEXT: 'Войти',\n  NAME_INPUT_LABEL: 'Имя',\n  NAME_INPUT_PLACEHOLDER: 'Введите Ваше имя',\n  EMAIL_INPUT_LABEL: 'Email',\n  EMAIL_INPUT_PLACEHOLDER: 'Введите Ваш email',\n  TEL_INPUT_LABEL: 'Номер телефона',\n  TEL_INPUT_PLACEHOLDER: 'Введите номер телефона',\n  LANGUAGE_INPUT_LABEL: 'Язык',\n  LANGUAGE_INPUT_PLACEHOLDER: 'Язык',\n  OPTIONS_LIST: [\n    { value: 'ru', text: 'Русский' },\n    { value: 'en', text: 'Английский' },\n    { value: 'ch', text: 'Китайский' },\n    { value: 'esp', text: 'Испанский' },\n  ],\n  ACCEPT_TITLE_BEGIN: 'Принимаю ',\n  ACCEPT_TITLE_END: ' использования',\n  ACCEPT_LINK_TEXT: 'условия',\n  SUBMIT_BUTTON_TEXT: 'Зарегистрироваться',\n};\n","import { forAppForm as config } from '../../configs/configForComponents';\nimport { useState, useCallback, useEffect } from 'react';\nimport { useFormWithValidation } from '../../hooks/useFormWithValidation';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './Form.css';\n\n/**\n * @module Form\n * @description Компонент формы регистрации\n * @param {Function} handleSubmit - обработчик сабмита формы регистрации\n * @returns {JSX}\n * @since v.1.0.0\n */\n\nfunction Form({ handleSubmit }) {\n  const {\n    FORM_TITLE,\n    REDIRECT_TITLE,\n    REDIRECT_BUTTON_TEXT,\n    NAME_INPUT_LABEL,\n    NAME_INPUT_PLACEHOLDER,\n    EMAIL_INPUT_LABEL,\n    EMAIL_INPUT_PLACEHOLDER,\n    TEL_INPUT_LABEL,\n    TEL_INPUT_PLACEHOLDER,\n    LANGUAGE_INPUT_LABEL,\n    LANGUAGE_INPUT_PLACEHOLDER,\n    OPTIONS_LIST,\n    ACCEPT_TITLE_BEGIN,\n    ACCEPT_TITLE_END,\n    ACCEPT_LINK_TEXT,\n    SUBMIT_BUTTON_TEXT,\n  } = config;\n\n  const { values, handleInputChange, errors, isFormValid, resetForm } = useFormWithValidation();\n  const { name, email, phone } = values;\n\n  const [isMouseEntered, setIsMouseEntered] = useState({});\n  const [selectedValue, setSelectedValue] = useState('');\n  const [isSelectMenuOpen, setIsSelectMenuOpen] = useState(false);\n  const [isSelectMenuHidden, setIsSelectMenuHidden] = useState(true);\n  const [isCheckboxChecked, setIsCheckboxChecked] = useState(false);\n\n  const selectInputClassName = classNames('form__select-input-options', {\n    'form__select-input-options_appearing': isSelectMenuOpen && !isSelectMenuHidden,\n    'form__select-input-options_disappearing': !isSelectMenuOpen && !isSelectMenuHidden,\n    'form__select-input-options_hidden': !isSelectMenuOpen && isSelectMenuHidden,\n  });\n\n  const nameErrorClassName = classNames('form__input-error', {\n    'form__input-error_hidden': !errors.name,\n  });\n\n  const emailErrorClassName = classNames('form__input-error', {\n    'form__input-error_hidden': !errors.email,\n  });\n\n  const phoneErrorClassName = classNames('form__input-error', {\n    'form__input-error_hidden': !errors.phone,\n  });\n\n  const submitButtonClassName = classNames('form__submit-button', {\n    'form__submit-button_enabled': isFormValid && selectedValue && isCheckboxChecked,\n    'form__submit-button_disabled': !(isFormValid && selectedValue && isCheckboxChecked),\n  });\n\n  /**\n   * @method closeSelectMenu\n   * @description Метод, закрывающий выпадающий список.\n   * @since v.1.0.0\n   * @public\n   */\n  const closeSelectMenu = useCallback(() => {\n    setIsSelectMenuOpen(false);\n    setTimeout(() => setIsSelectMenuHidden(true), 300);\n  }, []);\n\n  /**\n   * @method openSelectMenu\n   * @description Метод, открывающий выпадающий список\n   * @since v.1.0.0\n   * @public\n   */\n  const openSelectMenu = useCallback(() => {\n    setIsSelectMenuOpen(true);\n    setTimeout(() => setIsSelectMenuHidden(false), 50);\n  }, []);\n\n  /**\n   * @method handleMouseEnter\n   * @description Обработчик попадания курсора мыши в поле опции выпадающего списка.\n   *  Выделяет опцию, над которой находится курсор, другим цветом.\n   * @param {Event} evt - событие\n   * @since v.1.0.0\n   * @public\n   */\n  const handleMouseEnter = useCallback(\n    (evt) => {\n      const { id } = evt.target;\n      setIsMouseEntered({ ...isMouseEntered, [id]: true });\n    },\n    [isMouseEntered],\n  );\n\n  /**\n   * @method handleMouseLeave\n   * @description Обработчик выхода курсора из поля опции выпадающего списка.\n   *  Снимает выделение с опции.\n   * @param {Event} evt - событие\n   * @since v.1.0.0\n   * @public\n   */\n  const handleMouseLeave = useCallback(\n    (evt) => {\n      const { id } = evt.target;\n      setIsMouseEntered({ ...isMouseEntered, [id]: false });\n    },\n    [isMouseEntered],\n  );\n\n  /**\n   * @method handleOptionClick\n   * @description Обработчик клика по выбранной опции выпадающего списка.\n   * @param {Event} evt - событие\n   * @since v.1.0.0\n   * @public\n   */\n  const handleOptionClick = useCallback(\n    (evt) => {\n      const { text } = evt.target;\n      setSelectedValue(text);\n      closeSelectMenu();\n    },\n    [closeSelectMenu],\n  );\n\n  /**\n   * @method handleClickAccept\n   * @description обработчик клика по чекбоксу принятия условий соглашения\n   * @param {Event} evt - событие\n   * @since v.1.0.0\n   * @public\n   */\n  const handleClickAccept = useCallback(\n    (evt) => {\n      setIsCheckboxChecked(!isCheckboxChecked);\n    },\n    [isCheckboxChecked],\n  );\n\n  /**\n   * @method clearFormInputs\n   * @description Метод очистки формы от всех выбранных и введенных значений.\n   * @since v.1.0.0\n   * @public\n   */\n  const clearFormInputs = useCallback(() => {\n    resetForm();\n    setSelectedValue('');\n    setIsCheckboxChecked(false);\n  }, [resetForm]);\n\n  /**\n   * @method handleSubmitForm\n   * @description Обработчик сабмита формы\n   * @param {Event} evt - событие\n   * @since v.1.0.0\n   * @public\n   */\n  const handleSubmitForm = useCallback(\n    (evt) => {\n      evt.preventDefault();\n      const submitData = {\n        name,\n        email,\n        phone,\n        language: selectedValue,\n        accepted: isCheckboxChecked,\n      };\n      handleSubmit(submitData);\n      clearFormInputs();\n    },\n    [handleSubmit, name, email, phone, selectedValue, isCheckboxChecked, clearFormInputs],\n  );\n\n  useEffect(() => {\n    clearFormInputs();\n  }, [clearFormInputs]);\n\n  return (\n    <form onSubmit={handleSubmitForm} className=\"form app__form\">\n      <div className=\"form__container\">\n        <h2 className=\"form__title\">{FORM_TITLE}</h2>\n        <div className=\"form__description\">\n          <p className=\"form__redirect-title\">{REDIRECT_TITLE}</p>\n          <button type=\"button\" className=\"form__redirect-button\">\n            {REDIRECT_BUTTON_TEXT}\n          </button>\n        </div>\n        <div className=\"form__link form__link_hidden\">Здесь какая-то пустая ссылка из макета</div>\n        <div className=\"form__inputs\">\n          <div className=\"form__field form__field_type_default\">\n            <label className=\"form__input-label\">{NAME_INPUT_LABEL}</label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              value={name || ''}\n              onChange={handleInputChange}\n              placeholder={NAME_INPUT_PLACEHOLDER}\n              className=\"form__input form__input_type_default\"\n              pattern=\"[a-zA-Zа-яА-Я-s]*\"\n              required\n            ></input>\n            <span className={nameErrorClassName}>{errors.name || '1'}</span>\n          </div>\n          <div className=\"form__field form__field_type_default\">\n            <label className=\"form__input-label\">{EMAIL_INPUT_LABEL}</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={email || ''}\n              onChange={handleInputChange}\n              placeholder={EMAIL_INPUT_PLACEHOLDER}\n              className=\"form__input form__input_type_default\"\n              required\n            ></input>\n            <span className={emailErrorClassName}>{errors.email || '3'}</span>\n          </div>\n          <div className=\"form__field form__field_type_default\">\n            <label className=\"form__input-label\">{TEL_INPUT_LABEL}</label>\n            <input\n              type=\"tel\"\n              id=\"phone\"\n              name=\"phone\"\n              value={phone || ''}\n              onChange={handleInputChange}\n              placeholder={TEL_INPUT_PLACEHOLDER}\n              className=\"form__input form__input_type_default\"\n              pattern=\"[+]?[0-9][\\-]?[\\(]?\\d{3}[\\)]?[\\-]?\\d{3}[\\-]?\\d{2}[\\-]?\\d{2}\"\n              required\n            ></input>\n            <span className={phoneErrorClassName}>{errors.phone || '2'}</span>\n          </div>\n\n          <div className=\"form__field form__field_type_default form__field_type_select\">\n            <span className=\"form__input-label\">{LANGUAGE_INPUT_LABEL}</span>\n            <label>\n              <input\n                id=\"select\"\n                type=\"text\"\n                value={selectedValue || ''}\n                placeholder={LANGUAGE_INPUT_PLACEHOLDER}\n                onClick={!isSelectMenuOpen ? openSelectMenu : closeSelectMenu}\n                onFocus={() => !selectedValue && setSelectedValue(LANGUAGE_INPUT_PLACEHOLDER)}\n                onBlur={() => {\n                  selectedValue === LANGUAGE_INPUT_PLACEHOLDER && setSelectedValue('');\n                  closeSelectMenu();\n                }}\n                className=\"form__input form__input_type_default\"\n                readOnly\n              ></input>\n              <div className=\"form__select-input-button\"></div>\n            </label>\n            <ul className={selectInputClassName}>\n              {OPTIONS_LIST.map((option) => (\n                <li key={option.value}>\n                  <option\n                    id={option.value}\n                    value={option.value}\n                    onMouseMove={handleMouseEnter}\n                    onMouseOut={handleMouseLeave}\n                    onClick={handleOptionClick}\n                    className={`form__select-input-option ${\n                      isMouseEntered[option.value] ? 'form__select-input-option_mouseentered' : ''\n                    }`}\n                  >\n                    {option.text}\n                  </option>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <div className=\"form__field form__field_type_checkbox\">\n            <button\n              type=\"button\"\n              id=\"accept\"\n              name=\"accept\"\n              onClick={handleClickAccept}\n              className={`form__accept-checkbox ${\n                isCheckboxChecked && 'form__accept-checkbox_checked'\n              }`}\n            ></button>\n\n            <p className=\"form__accept-title\">\n              {ACCEPT_TITLE_BEGIN}\n              <button type=\"button\" className=\"form__accept-link\">\n                {ACCEPT_LINK_TEXT}\n              </button>\n              {ACCEPT_TITLE_END}\n            </p>\n          </div>\n        </div>\n        <button\n          type=\"submit\"\n          disabled={!isFormValid || !selectedValue || !isCheckboxChecked}\n          className={submitButtonClassName}\n        >\n          {SUBMIT_BUTTON_TEXT}\n        </button>\n      </div>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n};\n\nexport { Form };\n","import { useState, useCallback } from 'react';\n\n/**\n * @module useFormWithValidation\n * @description Пользовательский хук.<br>\n * Запускает валидацию формы, с которой используется. Хук выполняет валидацию и вывод ошибок\n *  используя браузерную валидацию, т.е. свойство validity объекта ValidityState.<br>\n * Возвращает объект со стейтами и методами.\n * @returns {Object}  { values, handleInputChange, errors, isFormValid, resetForm }\n * @since v.1.0.0\n * @public\n */\nfunction useFormWithValidation() {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isFormValid, setIsFormValid] = useState(false);\n  const [isInputValid, setIsInputValid] = useState({});\n\n  /**\n   * @method\n   * @name handleInputChange\n   * @argument {Event} event - событие\n   * @description Обработчик изменения полей инпутов.<br> При каждом вводе в поле инпута введенное значение\n   *  и результаты валидации введенных значений и формы в целом сохраняются в соответствующие стейты.\n   * @public\n   * @since v.1.0.0\n   */\n  const handleInputChange = useCallback(\n    (evt) => {\n      const { name, value } = evt.target;\n      setValues({ ...values, [name]: value });\n      setIsInputValid({ ...isInputValid, [name]: evt.target.checkValidity() });\n      setErrors({ ...errors, [name]: evt.target.validationMessage });\n      setIsFormValid(evt.target.closest('form').checkValidity());\n    },\n    [values, isInputValid, errors],\n  );\n\n  /**\n   * @method\n   * @name resetForm\n   * @description Сброс формы после ввода значений\n   * @public\n   * @since v.1.0.0\n   */\n  const resetForm = useCallback(() => {\n    setValues({});\n    setIsInputValid({});\n    setErrors({});\n    setIsFormValid(false);\n  }, []);\n\n  return {\n    values,\n    handleInputChange,\n    errors,\n    isFormValid,\n    resetForm,\n  };\n}\n\nexport { useFormWithValidation };\n","import { useCallback } from 'react';\nimport { Form } from '../Form/Form';\nimport './App.css';\n\n/**\n * @module App\n * @description Корневой компонент приложения.\n * @since v.1.0.0\n * @returns {JSX}\n */\nfunction App() {\n  /**\n   * @method handleSubmitRegisterForm\n   * @description Обработчик сабмита формы регистрации\n   * @param {Object} data - объект с данными формы\n   * @property {String} data.name - имя пользователя\n   * @property {Strung} data.email - email пользователя\n   * @property {String} data.phone - телефон пользователя\n   * @property {String} data.language -  выбранный язык\n   * @property {Boolean} data.accepted - индикатор принятия пользователем соглашения.\n   * @public\n   * @since v.1.0.0\n   */\n  const handleSubmitRegisterForm = useCallback((data) => {\n    console.log(data);\n  }, []);\n\n  return <Form handleSubmit={handleSubmitRegisterForm} />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('page'),\n);\n"],"sourceRoot":""}